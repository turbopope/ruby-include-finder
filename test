#!/usr/bin/ruby

require 'pp'

# def loadpath
#   result = Array.new
#   $:.each do |path|
#     # ls = `ls -p #{path} 2>/dev/null`.split("\n")
#     ls = `find "#{path}"`.split("\n")
#     result += ls.select{|filename| !filename.end_with?('/')}.map{|filename| "#{path}#{filename}"}
#   end
#   result
# end
#
# loadpath.each do |lib|
#   puts "#{lib}"
# end

class IncludeNotFoundError < StandardError
end

def search_in_loadpath(inc)
  inc += '.rb' if File.extname(inc) == ""
  $:.each do |dir|
    path = "#{dir}/#{inc}"
    return path if File.exist?(path)
  end
  raise IncludeNotFoundError, "Loadpath does not include #{inc}"
end

def search_in_paths(paths, inc)
  inc += '.rb' if File.extname(inc) == ""
  paths.each do |dir|
    path = "#{dir}/#{inc}"
    return path if File.exist?(path)
  end
  raise IncludeNotFoundError, "Loadpath does not include #{inc}"
end

def for_each_rubyfile_recursive(root)
  directorylist = %x[find "#{root}" -name '*.rb'].split("\n")
  directorylist.each do |filename|
    yield(filename)
  end
end

# puts search_in_loadpath("zlib.so")
# puts search_in_loadpath("json")
# puts search_in_loadpath("json/common")

def analyze_file(filename, gemfile, depth, resolved)
  return Hash.new unless File.extname(filename) == ".rb"
  File.open(filename) do |file|
    includes = file.grep(PATTERN)
    includes.each do |inc|
      match = PATTERN.match(inc)
      type = match['type'].strip.downcase
      inc = match['inc'].strip.downcase
      next if resolved.has_key?(inc)
      # puts "    -  #{type} #{inc}"
      if type == 'require'
        source_file = `ruby search #{gemfile} #{inc}`.strip
        resolved.store(inc, source_file)
        puts "#{(' ') * (depth * 4)}- #{inc}: #{source_file}"
        resolved.merge(analyze_file(source_file, gemfile, depth + 1, resolved)) if source_file != ""
      end
    end
  end
  return resolved
end

gemfile = ARGV[0]
dir = ARGV[1] || File.dirname(gemfile)
PATTERN = /^#*(?<type>(require|include)(_relative)?)\s+\(?["'](?<inc>.*?)["']/

for_each_rubyfile_recursive(dir) do |filename|
  puts "- #{filename}"
  resolved = analyze_file(filename, gemfile, 1, Hash.new)
  pp resolved
end
